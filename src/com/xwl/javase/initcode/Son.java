package com.xwl.javase.initcode;

/**
 * 考点：
 * 1、类初始化过程
 * 2、实例初始化过程
 * 3、方法的重写
 *
 * 类初始化过程：
 * (1)、一个类要创建实例需要先加载并初始化该类
 * 		Ⅰ、main方法所在的类需要先加载和初始化
 * (2)、一个子类要初始化需要先初始化父类
 * (3)、一个类初始化就是执行<clinit>()方法
 * 		Ⅰ、<clinit>()方法由静态类变量显示赋值代码和静态代码块组成
 * 		Ⅱ、类变量显示赋值代码和静态代码块代码从上到下顺序执行！！！
 * 		Ⅲ、<clinit>()方法只执行一次
 *
 * 实例初始化过程：
 * (1)、实例初始化就是执行<init>()方法
 * 		Ⅰ、<init>()方法可能重载有多个，有几个构造器就有几个<init>方法
 * 		Ⅱ、<init>()方法由非静态实例变量显示赋值代码和非静态代码块、对应构造器代码组成
 * 		Ⅲ、非静态实例变量显示赋值代码和非静态代码块代码从上到下顺序执行，而对应构造器的代码最后执行！！！
 * 		Ⅳ、每次创建实例对象，调用对应构造器，执行的就是对应的<init>方法
 * 		Ⅴ、<init>方法的首行是super()或super(实参列表)，即对应父类的<init>方法
 *
 *方法的重写Override：
 * (1)、哪些方法不可以被重写
 * 		final方法
 * 		静态方法
 * 		private等子类中不可见方法
 * (2)、对象的多态性
 * 		子类如果重写了父类的方法，通过子类对象调用的一定是子类重写过的代码
 * 		非静态方法默认的调用对象是this
 * 		this对象在构造器或者说<init>方法中就是正在创建的对象
 *
 *
 * 子类的初始化<clinit>：
 * （1）静态类变量显示赋值代码：j = method();
 * （2）子类的静态代码块
 *
 * 类初始化结果：
 * 先初始化父类：(5)(1)
 * 初始化子类：(10)(6)
 *
 * 子类的实例化方法<init>：
 * （1）super()（最前）：（9）（3）（2）
 * （2）非静态变量（2和3按顺序从上到下）：i = test()：（9）
 * （3）子类的非静态代码块（2和3按顺序从上到下） ：（8）
 * （4）子类的无参构造（最后）：（7）
 *
 * 因为创建了两个Son对象，因此实例化方法<init>执行两次
 *
 * （9）（3）（2）（9）（8）（7）
 */
public class Son extends Father {
    private int i = test();
    private static int j = method();

    // 构造器
    Son() {
//		super(); // 在子类构造器中一定会调用父类的构造器，写或不写都在
        System.out.print("(7)");
    }

    // 静态代码块
    static {
        System.out.print("(6)");
    }

    // 非静态代码块
    {
        System.out.print("(8)");
    }

    public int test() {
        System.out.print("(9)");
        return 1;
    }

    public static int method() {
        System.out.print("(10)");
        return 1;
    }

    public static void main(String[] args) {
        Son s1 = new Son(); // (5)(1)(10)(6)(9)(3)(2)(9)(8)(7)
        System.out.println();
        Son s2 = new Son(); // (9)(3)(2)(9)(8)(7)
    }
}
